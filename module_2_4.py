# Исходный список чисел
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Как работает программа:
# Исходный список: Исходный список чисел numbers содержит числа от 1 до 15.

# Создание пустых списков для простых и не простых чисел
primes = []
not_primes = []

# Как работает программа:
# Создание списков: Создаются два пустых списка: primes для простых чисел и not_primes для не простых чисел.

# Перебор списка numbers
for num in numbers:
    # Пропускаем число 1, так как оно не является ни простым, ни составным
    if num == 1:
        not_primes.append(num)
        continue

        # Как работает программа:
        # Цикл for: 
        # Сначала перебираются все числа в списке numbers.
        # Если текущее число равно 1, оно добавляется в список not_primes, и итерация продолжается.

    # Предполагаем, что число простое
    is_prime = True

    # Как работает программа:
    # Проверка на простоту:
    # Устанавливается флаг is_prime в значение True.
    
    # Вложенный цикл для проверки делителей
    for divisor in range(2, num):
        if num % divisor == 0:  # Если делится на divisor, то это не простое число
            is_prime = False
            break  # Прерываем цикл, так как мы нашли делитель

            # Как работает программа:
            # Проверка на простоту:
            # Вложенный цикл проверяет все возможные делители числа от 2 до num-1.
            # Если число делится на какой-либо делитель, is_prime устанавливается в False, и цикл прерывается с помощью break.

    # Записываем число в соответствующий список
    if is_prime:
        primes.append(num)
    else:
        not_primes.append(num)

    # Как работает программа:
    # Запись в списки: Если флаг is_prime остался True, число добавляется в список primes. В противном случае — в список not_primes.

# Вывод результатов на экран
print("Primes:", primes)
print("Not Primes:", not_primes)

# Как работает программа:
# Вывод результатов: Результаты выводятся на экран.
